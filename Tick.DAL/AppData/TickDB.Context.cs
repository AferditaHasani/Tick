//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tick.DAL.AppData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TickEntities : DbContext
    {
        public TickEntities()
            : base("name=TickEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<ExpensesTracking> ExpensesTrackings { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TimeTracking> TimeTrackings { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_Category_Insert(Nullable<bool> prmIsExpenses, string prmName, Nullable<int> prmInsertBy)
        {
            var prmIsExpensesParameter = prmIsExpenses.HasValue ?
                new ObjectParameter("prmIsExpenses", prmIsExpenses) :
                new ObjectParameter("prmIsExpenses", typeof(bool));
    
            var prmNameParameter = prmName != null ?
                new ObjectParameter("prmName", prmName) :
                new ObjectParameter("prmName", typeof(string));
    
            var prmInsertByParameter = prmInsertBy.HasValue ?
                new ObjectParameter("prmInsertBy", prmInsertBy) :
                new ObjectParameter("prmInsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Category_Insert", prmIsExpensesParameter, prmNameParameter, prmInsertByParameter);
        }
    
        public virtual int usp_ExpensesTracking_Insert(Nullable<int> prmUserID, Nullable<int> prmCategoryID, Nullable<decimal> prmAmount, string prmDescription, Nullable<System.DateTime> prmDate, Nullable<int> prmInsertBy)
        {
            var prmUserIDParameter = prmUserID.HasValue ?
                new ObjectParameter("prmUserID", prmUserID) :
                new ObjectParameter("prmUserID", typeof(int));
    
            var prmCategoryIDParameter = prmCategoryID.HasValue ?
                new ObjectParameter("prmCategoryID", prmCategoryID) :
                new ObjectParameter("prmCategoryID", typeof(int));
    
            var prmAmountParameter = prmAmount.HasValue ?
                new ObjectParameter("prmAmount", prmAmount) :
                new ObjectParameter("prmAmount", typeof(decimal));
    
            var prmDescriptionParameter = prmDescription != null ?
                new ObjectParameter("prmDescription", prmDescription) :
                new ObjectParameter("prmDescription", typeof(string));
    
            var prmDateParameter = prmDate.HasValue ?
                new ObjectParameter("prmDate", prmDate) :
                new ObjectParameter("prmDate", typeof(System.DateTime));
    
            var prmInsertByParameter = prmInsertBy.HasValue ?
                new ObjectParameter("prmInsertBy", prmInsertBy) :
                new ObjectParameter("prmInsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ExpensesTracking_Insert", prmUserIDParameter, prmCategoryIDParameter, prmAmountParameter, prmDescriptionParameter, prmDateParameter, prmInsertByParameter);
        }
    
        public virtual int usp_Role_Insert(string prmName, Nullable<int> prmInsBy)
        {
            var prmNameParameter = prmName != null ?
                new ObjectParameter("prmName", prmName) :
                new ObjectParameter("prmName", typeof(string));
    
            var prmInsByParameter = prmInsBy.HasValue ?
                new ObjectParameter("prmInsBy", prmInsBy) :
                new ObjectParameter("prmInsBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Role_Insert", prmNameParameter, prmInsByParameter);
        }
    
        public virtual int usp_Task_Insert(string prmName, string prmDescription, string prmColor, Nullable<int> prmInsBy)
        {
            var prmNameParameter = prmName != null ?
                new ObjectParameter("prmName", prmName) :
                new ObjectParameter("prmName", typeof(string));
    
            var prmDescriptionParameter = prmDescription != null ?
                new ObjectParameter("prmDescription", prmDescription) :
                new ObjectParameter("prmDescription", typeof(string));
    
            var prmColorParameter = prmColor != null ?
                new ObjectParameter("prmColor", prmColor) :
                new ObjectParameter("prmColor", typeof(string));
    
            var prmInsByParameter = prmInsBy.HasValue ?
                new ObjectParameter("prmInsBy", prmInsBy) :
                new ObjectParameter("prmInsBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Task_Insert", prmNameParameter, prmDescriptionParameter, prmColorParameter, prmInsByParameter);
        }
    
        public virtual int usp_TimeTracking_Insert(Nullable<int> prmTaskID, Nullable<int> prmUserID, string prmDescription, Nullable<System.DateTime> prmDate, Nullable<System.DateTime> prmStartTime, Nullable<System.DateTime> prmEndTime, Nullable<int> prmInsertBy)
        {
            var prmTaskIDParameter = prmTaskID.HasValue ?
                new ObjectParameter("prmTaskID", prmTaskID) :
                new ObjectParameter("prmTaskID", typeof(int));
    
            var prmUserIDParameter = prmUserID.HasValue ?
                new ObjectParameter("prmUserID", prmUserID) :
                new ObjectParameter("prmUserID", typeof(int));
    
            var prmDescriptionParameter = prmDescription != null ?
                new ObjectParameter("prmDescription", prmDescription) :
                new ObjectParameter("prmDescription", typeof(string));
    
            var prmDateParameter = prmDate.HasValue ?
                new ObjectParameter("prmDate", prmDate) :
                new ObjectParameter("prmDate", typeof(System.DateTime));
    
            var prmStartTimeParameter = prmStartTime.HasValue ?
                new ObjectParameter("prmStartTime", prmStartTime) :
                new ObjectParameter("prmStartTime", typeof(System.DateTime));
    
            var prmEndTimeParameter = prmEndTime.HasValue ?
                new ObjectParameter("prmEndTime", prmEndTime) :
                new ObjectParameter("prmEndTime", typeof(System.DateTime));
    
            var prmInsertByParameter = prmInsertBy.HasValue ?
                new ObjectParameter("prmInsertBy", prmInsertBy) :
                new ObjectParameter("prmInsertBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TimeTracking_Insert", prmTaskIDParameter, prmUserIDParameter, prmDescriptionParameter, prmDateParameter, prmStartTimeParameter, prmEndTimeParameter, prmInsertByParameter);
        }
    
        public virtual int usp_User_Insert(string prmName, string prmLastname, Nullable<int> prmRole, string prmUsername, string prmPassword, Nullable<int> prmInsBy)
        {
            var prmNameParameter = prmName != null ?
                new ObjectParameter("prmName", prmName) :
                new ObjectParameter("prmName", typeof(string));
    
            var prmLastnameParameter = prmLastname != null ?
                new ObjectParameter("prmLastname", prmLastname) :
                new ObjectParameter("prmLastname", typeof(string));
    
            var prmRoleParameter = prmRole.HasValue ?
                new ObjectParameter("prmRole", prmRole) :
                new ObjectParameter("prmRole", typeof(int));
    
            var prmUsernameParameter = prmUsername != null ?
                new ObjectParameter("prmUsername", prmUsername) :
                new ObjectParameter("prmUsername", typeof(string));
    
            var prmPasswordParameter = prmPassword != null ?
                new ObjectParameter("prmPassword", prmPassword) :
                new ObjectParameter("prmPassword", typeof(string));
    
            var prmInsByParameter = prmInsBy.HasValue ?
                new ObjectParameter("prmInsBy", prmInsBy) :
                new ObjectParameter("prmInsBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_User_Insert", prmNameParameter, prmLastnameParameter, prmRoleParameter, prmUsernameParameter, prmPasswordParameter, prmInsByParameter);
        }
    }
}
